import Foundation


class JsonDecoder {
    func decodeExpenses<T: Codable>(_ data: Data) -> [T]? {
        let decoder = JSONDecoder()
        do {
            let decodedData = try decoder.decode([T].self, from: data)
            return decodedData
        } catch {
            NSLog("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
            return nil
        }
    }
    
    static func cleanJSON(_ data: Data) -> Data? {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Data –≤ —Å—Ç—Ä–æ–∫—É
            guard let text = String(data: data, encoding: .utf8) else {
                return nil
            }
            
            var cleanedText = text
            
            // –£–±–∏—Ä–∞–µ–º "```json" –∏ "```" —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
            if let jsonRange = cleanedText.range(of: "```json") {
                cleanedText.removeSubrange(jsonRange) // –£–¥–∞–ª—è–µ–º "```json"
                NSLog("'''json deleted ü§å")
            }
            
            if let endRange = cleanedText.range(of: "```", options: .backwards) {
                cleanedText.removeSubrange(endRange) // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ "```"
                NSLog("''' deleted ü§å")

            }
            
            // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            cleanedText = cleanedText.trimmingCharacters(in: .whitespacesAndNewlines)
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ Data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
            return cleanedText.data(using: .utf8)
        }
}


